---
layout: post
title: Runtime实战
---

<!-- h1. {{ page.title }} -->

<!-- p(meta). 2014年05月27日14:15:51 - 徐同同 -->

文中示例来自互联网搜集和日常积累，做个整理

场景一：
一个列表中有多种类型的cell，ViewController与cell传递model时，假如传递id类型的object，在cell内部进行model的判断，
而不同的model在cell上展示的属性名相同，此时用KVO进行赋值是十分方便的。有时会加入新的model，在不改变原有代码的基础上，
对是否存在该属性进行检测就十分必要了。

<pre class="prettyprint">
- (BOOL)hasAttribute:(NSString *)attName
{
    BOOL flag = NO;
    u_int count;
    Ivar *ivars = class_copyIvarList([self class],&count);
    for (int i = 0; i <count ; i++)
    {
        const char* propertyName = ivar_getName(ivars[i]);
        NSString *strName = [[[NSString  stringWithCString:propertyName encoding:NSUTF8StringEncoding] componentsSeparatedByString:@"_"] lastObject];
        if ([attName isEqualToString:strName]) {
            flag = YES;
            break;
        }
    }
    if (ivars) {
         free(ivars);
    }
    return flag;
}
</pre>

Ivar *class_copyIvarList(Class cls, unsigned int *outCount)  返回该类所有的属性和全局变量，私有全局变量和私有属性也能获取到，属性的话是带有_的,因为这块内存是copy得手动释放free()。
const char *ivar_getName(Ivar v) 返回实例的属性变量的name
<pre class="prettyprint">
objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)
//这个是获取属性的
</pre>
写一个NSObject的分类，在调用KVO之前，检测下是否包含该属性，不过还是要区分下属性和变量
场景二：
场景三：



