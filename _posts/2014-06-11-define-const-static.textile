---
layout: post
title: define-const-static
categories: basic
---

h3. Define用法：

　　define主要是用于宏常量定义的，使程序看起来更简洁明了，方便代码维护，#define定义的实质只是一个常数的名字，没有具体数据类型的，没有分配内存空间。在编译是会被编译器替换为该常数。每次使用该宏定义，就要进行编译并分配空间，若一个程序中多次使用define定义的数据，则就会有多份拷贝。这么做是为了提高程序的可读性，但安全性相对差点。


h3. const用法：

　　 const定义的全局数据变量，其基本作用和define相同，但又在define的基础上增加了好多功能。const定义的数据在程序开始前就在全局变量区分配了空间，在程序执行的过程中，若用到该数据，直接读取就可以，没必要每次进行编译，整个程序过程中也只有一个拷贝。关于const用法好多，如：

* 定义常量
    const int a=100;  //定义a为一个全局数据区常量
    const int *a=&i;   //定义一个指向常量i的指针，其中*a是不能修改的
    int * const a=&i;  //定义一个常量指针 ，其中a是不能修改的  
    const int * const a=&i; //定义一个指向常量i的常量型指针
* const修饰函数参数(包括传值、传址、引用)
    void fun(const int a);       //修饰传值，但这个用法是没有用的，因为a本身就是要传入数据的一个拷贝，是另分配的内存，所以对a的改变，对原先数据是没有影响的
    void fun(const int *a);     //修饰传址，要传入的数据是一个地址，此时若程序中对*a进行修改，则原先的数据也会跟着修改，所以若不想改变原先数据的值，只是希望在函数中引用该数据，则需要加const
    void fun(const int &a);     //修饰引用，其效用和传址是一样的，引用就是给要传入的数据起了一个别名。
关于修饰引用，下面重点说一下：当输入普通数据类型时，不需要加const修饰，因为参数本身就是临时分配到栈空间的拷贝，但若参数是用户自定义类型或类时，需要引用传递，因为可以提高效率。
    void fun(A a); 
    //A为用户自己定义的类型，这种用法效率低，函数体内产生A类型的临时对象复制参数a时，该临时对象的构造、复制、析构过程都将消耗时间。
    void fun(const A& a); 
    //这用用法效率高，引用传递不需要产生临时对象，省了临时对象的构造、复制、析构过程消耗的时间。但光用引用有可能改变a,所以加const。


<pre>#include <iostream>
#include <string>
using namespace std;

class Person {
public:
    Person()
    {
        cout<<"creat person"<<endl;
    }
    ~Person()
    {
        cout<<"destroy person"<<endl;
    }
    virtual void fun() const
    {
        cout<<"hello person"<<endl;
    }
};

class Student: public Person {
public:
    Student()
    {
        cout<<"create student"<<endl;
    }
    ~Student()
    {
        cout<<"desotry student"<<endl;
    }
    virtual void fun() const
    {
        cout<<"hello sudent"<<endl;
    }
};

bool studentval(Student p)
{
    p.fun();
    return true;
}
int main(int argc,char *argv[])
{
    Student pa;
    cout<<endl;
    studentval(pa);
    cout<<endl;
    return 0;
}</pre>


p. 分析：首先声明Student pa时进行了两次构造函数（student和person），再调用studentval（pa）函数时，需要创建pa的临时变量，即调用了两次拷贝构造函数（student和person），但该函数结束后，创建的临时变量销毁，调用了两次析构函数，而当main函数结束后，pa销毁又调用了两次构造函数。共调用了8次函数。若改为引用传递，及函数改为：

<pre>bool studentval(const Student& p)
{
    p.fun();
    return true;
}</pre>

p. 因为引用传递时没有构造临时变量，也就不需要另外进行构造和析构了，就整个函数过程只需要4次调用。
另外const修饰引用还可以解决多态中的"切断"问题,如下面代码中多态的实现：


<pre>
#include <iostream>
#include <string>
using namespace std;

class Person {
public:
    Person()
    {
        cout<<"creat person"<<endl;
    }
    ~Person()
    {
        cout<<"destroy person"<<endl;
    }
    virtual void fun() const
    {
        cout<<"hello person"<<endl;
    }
};

class Student: public Person {
public:
    Student()
    {
        cout<<"create student"<<endl;
    }
    ~Student()
    {
        cout<<"desotry student"<<endl;
    }
    virtual void fun() const    //勿丢const
    {
        cout<<"hello sudent"<<endl;
    }
};

bool studentval(Person p)
{
    p.fun();
    return true;
}
int main(int argc,char *argv[])
{
    Student pa;
    cout<<endl;
    studentval(pa);
    cout<<endl;
    return 0;
}</pre>

按理说调用studentval(Person p)，当传入Student类型的时候，按照多态应该显示的student的内容，即显示"hello stuent"，但结果显示的却是"hello person"，说明被切断了，若改为bool studentval(const Person &p)时，便解决了该问题。

（3）const修饰成员函数
　　void fun(int a) const
（4）const修饰函数返回值
　　const int *fun(int a)


h3. static用法：

　　函数内部定义的变量，在程序执行到它的定义处时，编译器为它在栈上分配空间，大家知道，函数在栈上分配的空间在此函数执行结束时会释放掉，这样就产生了一个问题: 如果想将函数中此变量的值保存至下一次调用时，如何实现？最容易想到的方法是定义一个全局的变量，但定义为一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅受此函数控制）。因此C++ 中引入了静态变量static，用它来修饰变量，它能够指示编译器将此变量在程序的静态存储区分配空间保存，这样即实现了目的，又使得此变量的存取范围不变。

　　对于局部变量而言，static改变了变量的存储方式，使其变为静态存储，连接方式是内部连接（只能在该文件中使用，局部变量本来就是内部连接了），即局部变量只改变存储方式，不改变连接方式。对于全局变量而言，则不改变存储方式（全局变量已经是静态存储了），它仅改变其连接类型，全局变量默认是外联的，即能被其他外部文件直接使用，只需提前声明extern，若加上static，则只能在本文件使用，即全局变量只改变连接方式，不改变存储方式。